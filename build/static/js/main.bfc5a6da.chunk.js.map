{"version":3,"sources":["modules/UI/components/TextInput/Label.tsx","modules/UI/components/TextInput/index.tsx","modules/UI/components/FormContainer/index.tsx","modules/UI/components/Button/index.tsx","modules/utils/CreditCardsRules.ts","modules/utils/ValidateCardNumber.ts","modules/features/CreditCardForm/CreditCardForm.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["LabelContainer","styled","div","Label","children","InputContainer","Input","input","props","isValid","TextInput","onChange","label","value","type","Form","FormContainer","ButtonContainer","disabled","Button","name","rule","luhnReducer","accumulator","currentValue","i","getCardBrand","card","cardValue","replace","rules","find","brand","test","isCardValid","some","isKnownCreditCard","split","reverse","map","x","parseInt","reduce","CreditCardForm","useState","cardNumber","setCardNumber","cardBrand","e","currentTarget","length","trim","getMaskedInput","App","className","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.bfc5a6da.chunk.js","sourcesContent":["import React from 'react';\nimport styled from 'styled-components';\nconst LabelContainer = styled.div`\n  font-size: 14px;\n  margin-bottom: 5px;\n  font-weight: 500;\n  color: #1a3b5d;\n  width: 100%;\n  display: block;\n  user-select: none;\n`;\n\nexport const Label: React.StatelessComponent = ({ children }) => (\n  <LabelContainer>{children}</LabelContainer>\n);\n","import React from 'react';\nimport styled from 'styled-components';\nimport { Label } from './Label';\n\nconst InputContainer = styled.div`\n  width: 100%;\n  display: flex;\n  flex-direction: column;\n  text-align: left;\n`;\n\ninterface InputProps {\n  isValid?: boolean;\n  value?: string;\n}\n\nconst Input = styled.input<InputProps>`\n  font-size: 18px;\n  border: 2px solid;\n\n  height: 40px;\n  border-color: ${props => (props.isValid ? 'green' : 'tomato')};\n  border-radius: 5px;\n  padding-left: 5px;\n  padding-right: 5px;\n  :focus {\n    outline: none;\n  }\n`;\n\ninterface TextInputProps {\n  onChange?: (e: React.FormEvent<HTMLInputElement>) => void;\n  isValid?: boolean;\n  label?: string;\n  value?: string;\n}\n\nexport const TextInput: React.StatelessComponent<TextInputProps> = ({\n  onChange,\n  isValid,\n  label,\n  value,\n}) => (\n  <InputContainer>\n    <Label>{label}</Label>\n    <Input value={value} type=\"text\" onChange={onChange} isValid={isValid} />\n  </InputContainer>\n);\n","import React from 'react';\nimport styled from 'styled-components';\nconst Form = styled.div`\n  margin: auto;\n  width: 100%;\n  max-width: 570px;\n  box-sizing: border-box;\n  background: #fff;\n  box-shadow: 0 30px 60px 0 rgba(90, 116, 148, 0.4);\n  border-radius: 10px;\n  padding: 35px;\n\n  @media screen and (max-width: 576px) {\n    margin: 0 auto;\n    width: 100%;\n    max-width: 100%;\n    padding-right: 10px;\n    padding-left: 10px;\n  }\n`;\n\nexport const FormContainer: React.StatelessComponent = ({ children }) => (\n  <Form>{children}</Form>\n);\n","import React from 'react';\nimport styled from 'styled-components';\n\ninterface ButtonContainerProps {\n  disabled?: boolean;\n}\nconst ButtonContainer = styled.div<ButtonContainerProps>`\n  width: 100%;\n  height: 55px;\n  line-height: 55px;\n  background: ${props => (props.disabled ? '#aaa' : '#2364d2')};\n  border: none;\n  border-radius: 5px;\n  font-size: 22px;\n  font-weight: 500;\n  box-shadow: 3px 10px 20px 0px rgba(35, 100, 210, 0.3);\n  color: #fff;\n  margin-top: 20px;\n  cursor: pointer;\n  cursor: ${props => (props.disabled ? 'default' : 'pointer')};\n\n  @media screen and (max-width: 480px) {\n    margin-top: 10px;\n  }\n`;\ninterface ButtonProps {\n  disabled?: boolean;\n}\nexport const Button: React.StatelessComponent<ButtonProps> = ({\n  disabled,\n  children,\n}) => <ButtonContainer disabled={disabled}>{children}</ButtonContainer>;\n","/*\n * list of supported credit cards with RegExp rule to\n * validate the provided value.\n * It could be extended to allow adding an 'image' key to\n * add the logo for each brand, and of course more card brands.\n */\n\nexport interface Brand {\n  name: string;\n  rule: RegExp;\n}\n\nexport default [\n  { name: 'Visa', rule: /^(?:4[0-9]{12}(?:[0-9]{3})?)$/ },\n  { name: 'Mastercard', rule: /^(?:5[1-5][0-9]{14})$/ },\n  { name: 'Amex', rule: /^(?:3[47][0-9]{13})$/ },\n];\n","/*\n * CreditCard Validator using the Luhn Formula:\n *\n * 1. From the rightmost digit and moving left,\n * double the value of every other digit: the\n * first rightmost digit is not doubled, then\n * the second rightmost digit is doubled, the\n * third is not doubled, the fourth is doubled, etc.\n *\n * 2. If the result of the doubling operation is greater\n * than 9 (e.g., 8 × 2 = 16), then subtract 9 from that\n * result (e.g., 16: 16 − 9 = 7, 18: 18 − 9 = 9).\n *\n * 3. Take the sum of all the digits.\n *\n * 4. If the total is a multiple of 10 (modulo 10 is\n * equal to 0) then the number is valid according to the\n * Luhn formula; otherwise it is not valid.\n *\n * */\n\nimport rules, { Brand } from './CreditCardsRules';\n\nconst prepareForValidation = (cardNumber: string): Array<number> => {\n  return cardNumber\n    .split('') //convert string to array\n    .reverse() //reverse the array since we start from right\n    .map(x => parseInt(x, 10)); //convert the characters to numbers\n};\n\nconst luhnReducer = (\n  accumulator: number,\n  currentValue: number,\n  i: number,\n): number => {\n  let value = currentValue;\n\n  if (i % 2 !== 0) {\n    value = currentValue * 2;\n    value = value > 9 ? value - 9 : value;\n  }\n\n  return accumulator + value;\n};\n\nconst isKnownCreditCard = (card: string): boolean => {\n  return rules.some(brand => brand.rule.test(card));\n};\n\nexport const getCardBrand = (card: string): Brand | undefined => {\n  const cardValue = card.replace(/ /g, '');\n  return rules.find(brand => brand.rule.test(cardValue));\n};\n\nexport const isCardValid = (card: string): boolean => {\n  const cardValue = card.replace(/ /g, '');\n  if (!isKnownCreditCard(cardValue)) {\n    return false;\n  }\n\n  const preparedCard = prepareForValidation(cardValue);\n  return preparedCard.reduce(luhnReducer) % 10 === 0 ? true : false;\n};\n","import React, { useState } from 'react';\nimport { FormContainer, TextInput, Button } from '../../UI/components';\n\nimport { isCardValid, getCardBrand } from '../../utils';\n\nconst getMaskedInput = (value: string) => {\n  const cardBrand = getCardBrand(value);\n  if (cardBrand && cardBrand.name === 'Amex') {\n    return value\n      .replace(/[^\\d0-9]/g, '')\n      .replace(/(.{4})/, '$1 ')\n      .replace(/(.{12})/, '$1 ')\n      .trim();\n  }\n  return value\n    .replace(/[^\\d0-9]/g, '')\n    .replace(/(.{4})/g, '$1 ')\n    .trim();\n};\nexport const CreditCardForm: React.StatelessComponent = ({ children }) => {\n  const [cardNumber, setCardNumber] = useState('');\n  const cardBrand = getCardBrand(cardNumber);\n  return (\n    <FormContainer>\n      <TextInput\n        onChange={(e: React.FormEvent<HTMLInputElement>) => {\n          // Allow only numbers and Insert space every 4 chars\n          if (e.currentTarget.value.length > 19) {\n            return false;\n          }\n          const value = getMaskedInput(e.currentTarget.value);\n\n          setCardNumber(value);\n        }}\n        label={`Card Number${cardBrand ? ': ' + cardBrand.name : ''}`}\n        isValid={cardNumber ? isCardValid(cardNumber) : false}\n        value={cardNumber}\n      />\n\n      <p />\n      <Button disabled={!isCardValid(cardNumber)}>Submit</Button>\n    </FormContainer>\n  );\n};\n","import React from 'react';\nimport './App.css';\nimport { CreditCardForm } from './modules/features';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <CreditCardForm />\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}